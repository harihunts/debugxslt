#summary overview of rules, how to write them and future plans

= What are Rules =

Rules are just schematron <assert/> or <report/> elements, which are contained in sch/xslt-std.sch.

I use <report/> when it is an ambiguous condition and want to output some extra information that might help 'jog' the XSLT authors mind that all is well.

I use <assert/> when the described condition should exist (still some best practice here, for example I believe a xsl:stylesheet should have @version attribute). 

Please review the sch/xslt-std.sch for examples of rules.

= Some ideas for simple rules =

some more ideas for rules I would like to implement;


  * Unused defined modes

  * Undefined modes

  * Undefined named templates

  * unused defined named templates

  * Templates that use name= where match= was probably intended

  * xsl:call-template elements that contain anything other than xsl:with-param

  * Variable/parameter references that are not defined at the point of use

  * Forgot to add @ to attribute, common with prefixed attributes

  * Misunderstanding of addressing attributes or missing brackets with attribute ex. <xsl:variable name="testvar" select="test@result"/>


= More difficult rules to implement =

  * Duplicate match patterns

here the following rules would be interested in case sensitivity in elements, attributes and params/vars
	
  * Same name different caps when addressing element

  * Same name different caps with attributes

  * Same name different caps with param/var

I think these rules are probably all possible ..... though I do not yet have the time to implement.

I am pretty certain anything to do with well formedness is not possible e.g. like the following old chestnuts;

  * added ending angle bracket in middle of xsl:stylesheet element

  * Missing quote in select statement

A lot of these kind of issues can mask other errors as well, complicating debugging.

Note, one of the reasons why I initially opted for Ant as a 'runner' of this whole process is that I could employ some sort of static analysis on xslt (that doesn't depend on well formed xml) before execution ... but this will wait until I have rules sorted out; I would like to eventually consider a simple rule format then transform to Schematron, but this needs some rule authoring experience first.